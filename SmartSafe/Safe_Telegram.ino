#include <WiFi.h>
#include <WiFiClientSecure.h>
#include <UniversalTelegramBot.h>
#include "FastLED.h"
// –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–µ—Ç–∏
#define WIFI_SSID "XXXX"
#define WIFI_PASSWORD "XXXXXXX"
// —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
#define BOT_TOKEN "9179XXXXXXXXXXXXXXXXXXXXXX4PUc"
const unsigned long BOT_MTBS = 500;  
WiFiClientSecure secured_client;
UniversalTelegramBot bot(BOT_TOKEN, secured_client);
unsigned long bot_lasttime;

//–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–µ–π—Ñ–∞
int level = 0;
bool startBreake = false;
String last_chat_id = "";
String last_msg = "";
bool msgArived = false;

#define LED_PIN1 4   // –ø–∏–Ω, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –ª–µ–Ω—Ç–∞
#define LED_NUM1 30  // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—Ç–æ–¥–∏–æ–¥–æ–≤ –Ω–∞ –ª–µ–Ω—Ç–µ
CRGB led1[LED_NUM1];

#include <ESP32_Servo.h>
Servo myservo;

const int pinPhoto = 35; // –ø–∏–Ω —Ñ–æ—Ç–æ—Ä–µ–∑–∏—Å—Ç–æ—Ä–∞
int raw = 0;

#include <Adafruit_Sensor.h>  // –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–∞—Ç—á–∏–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã, –≤–ª–∞–∂–Ω–æ—Å—Ç–∏ –∏ –¥–∞–≤–ª–µ–Ω–∏—è
#include <Adafruit_BME280.h>
Adafruit_BME280 bme280;

int pin = 34;  // –ø–∏–Ω –ø–æ—Ç–µ–Ω—Ü–∏–æ–º–µ—Ç—Ä–∞

void setup() {
  pinMode(pinPhoto, INPUT);
  myservo.attach(13);  // –ø–∏–Ω —Å–µ—Ä–≤–æ–º–æ—Ç–æ—Ä–∞
  myservo.write(50);
  pinMode(pin, INPUT);  
  FastLED.addLeds< WS2812, LED_PIN1, GRB>(led1, LED_NUM1);
  Serial.begin(115200);
  delay(512);
  Serial.println();
  Serial.print("Connecting to Wifi SSID ");
  Serial.print(WIFI_SSID);
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  secured_client.setCACert(TELEGRAM_CERTIFICATE_ROOT);
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print(".");
    delay(500);
  }
  Serial.print("\nWiFi connected. IP address: ");
  Serial.println(WiFi.localIP());

  Wire.begin();
  bool bme_status = bme280.begin();
  if (!bme_status) {
    Serial.println("–ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É 0—Ö77, –ø—Ä–æ–±—É—é –¥—Ä—É–≥–æ–π...");
    bme_status = bme280.begin(0x76);
    if (!bme_status)
      Serial.println("–î–∞—Ç—á–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ");
  }
}

// —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
void handleNewMessages(int numNewMessages) {
  Serial.print("handleNewMessages ");
  Serial.println(numNewMessages);

  for (int i = 0; i < numNewMessages; i++) {
    String chat_id = bot.messages[i].chat_id;
    last_chat_id = chat_id;
    String text = bot.messages[i].text;
    text.toLowerCase();
    last_msg = text;
    if (level == 5 or level == 4) msgArived = true;
    String from_name = bot.messages[i].from_name;
    if (from_name == "")
      from_name = "Guest";


    if ((text == "/start") or (text == "/help"))  // –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–∑–æ–≤–∞ –ø–æ–º–æ—â–∏
    {
      bot.sendMessage(chat_id, "–ü—Ä–∏–≤–µ—Ç, " + from_name + "!", "");
      bot.sendMessage(chat_id, "–Ø –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –ô–æ—Ç–∏–∫ 32. –ö–æ–º–∞–Ω–¥—ã —Å–º–æ—Ç—Ä–∏—Ç–µ –≤ –º–µ–Ω—é —Å–ª–µ–≤–∞ –æ—Ç —Å—Ç—Ä–æ–∫–∏ –≤–≤–æ–¥–∞", "");
      String sms = "–ö–æ–º–∞–Ω–¥—ã:\n";
      sms += "/startbreak - –Ω–∞—á–∞—Ç—å –≤–∑–ª–æ–º\n";
      sms += "/stopbreak - –∑–∞–≤–µ—Ä—à–∏—Ç—å –≤–∑–ª–æ–º\n";
      bot.sendMessage(chat_id, sms, "Markdown");
    }

    if (text == "/startbreak") {
      startBreake = true;
      for (int i = 0; i < 20; i++) {
        led1[i].setRGB(0, 0, 0);
      }
      for (int i = 21; i < 25; i++) {
        led1[i].setRGB(0, 255, 0);
      }
      FastLED.show();
      myservo.write(50);
      level = 0;
    }

    if (text == "/stopbreak") {
      startBreake = false;
      FastLED.clear();
      for (int i = 21; i < 25; i++) {
        led1[i].setRGB(0, 255, 0);
      }
      FastLED.show();
      myservo.write(50);
      bot.sendMessage(chat_id, "–í–∑–ª–æ–º –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", "");
    }
  }
}

void loop()  // –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
{
  if (startBreake == true) {
    safeChekerSensor();
  }

  if (millis() - bot_lasttime > BOT_MTBS) {
    int numNewMessages = bot.getUpdates(bot.last_message_received + 1);

    while (numNewMessages) {
      Serial.println("got response");
      handleNewMessages(numNewMessages);
      numNewMessages = bot.getUpdates(bot.last_message_received + 1);
    }

    bot_lasttime = millis();
  }
}

void safeChekerSensor() {
  if (level == 0) {
    sendMSG("–¢–∞–π–Ω—ã –ø—Ä—è—á—É—Ç—Å—è –≤ —Ç–µ–º–Ω–æ—Ç–µ");
    level = 1;
    //lvlComplite();
  }

  raw = analogRead(pinPhoto);
  Serial.println(raw);
  // —É—Ä–æ–≤–µ–Ω—å 1: —Ñ–æ—Ç–æ—Ä–µ–∑–∏—Å—Ç–æ—Ä
  if (level == 1 and raw < 1000) {
    lvlComplite();
    sendMSG("–¢–µ–ø–ª–µ–µ...");
    level = 2;
  }

  float t = bme280.readTemperature();
  // —É—Ä–æ–≤–µ–Ω—å 2: –¥–∞—Ç—á–∏–∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
  if (level == 2 and t > 26) {
    lvlComplite();
    sendMSG("—Å–æ—Ö—Ä–∞–Ω—è–π –±–∞–ª–∞–Ω—Å");
    level = 3;
  }

  int poten = analogRead(pin);
  Serial.println(poten);
  // —É—Ä–æ–≤–µ–Ω—å 3: –ø–æ–∑–∏—Ü–∏—è –ø–æ—Ç–µ–Ω—Ü–∏–æ–º–µ—Ç—Ä–∞
  if (poten < 1900 and poten > 1800 and level == 3) {
    lvlComplite();
    sendMSG("2 –≤ üé≤");
    level = 4;
  }

  if (level == 4 && msgArived == true) {
    msgArived = false;
    // —É—Ä–æ–≤–µ–Ω—å 4: –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å "–¥–≤–∞ –≤ –∫—É–±–µ"
    if (last_msg == "8") {
      lvlComplite();
      sendMSG("–°–∫–æ–ª—å–∫–æ —è–¥–µ—Ä –≤ –ô–æ–¢–∏–∫–µ?");
      level = 5;
    } else {
      sendMSG("–ù–µ–∞, —á—Ç–æ-—Ç–æ –Ω–µ —Å—Ö–æ–¥–∏—Ç—Å—è");
    }
  }
  if (level == 5 && msgArived == true) {
    msgArived = false;
    // —É—Ä–æ–≤–µ–Ω—å 5: –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å "—Å–∫–æ–ª—å–∫–æ —è–¥–µ—Ä –≤ –π–æ—Ç–∏–∫–µ"
    if (last_msg == "2") {
      lvlComplite();
      sendMSG("–°–µ–π—Ñ –≤–∑–ª–æ–º–∞–Ω, –≤—ã —Ö–∞–∫–µ—Ä—ã —á—Ç–æ –Ω–∞–¥–æ!");
      for (int i = 0; i < 20; i++) {
        led1[i].setRGB(255, 255, 255);
      }
      FastLED.show();
      myservo.write(150);
      level = 6;
    } else {
      sendMSG("–ù–µ–∞, —á—Ç–æ-—Ç–æ –Ω–µ —Å—Ö–æ–¥–∏—Ç—Å—è");
    }
  }
}


// –≤–∫–ª—é—á–µ–Ω–∏–µ —Å–≤–µ—Ç–æ–¥–∏–æ–¥–æ–≤ –ø—Ä–∏ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è
void lvlComplite() {
  led1[30 - level].setRGB(0, 255, 0);
  FastLED.show();
}

String bufer_msg = "";

void sendMSG(String msg) {
  if (bufer_msg != msg) {
    bot.sendMessage(last_chat_id, msg, "");
    bufer_msg = msg;
  }
}
