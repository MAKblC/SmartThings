#include <WiFi.h>  // –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è Wi-Fi
#include <FastLED.h>
#include <WiFiClientSecure.h>
#include <UniversalTelegramBot.h>                                  // –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¢–µ–ª–µ–≥—Ä–∞–º

#define WIFI_SSID "XXXXX"                                          // –ª–æ–≥–∏–Ω Wi-Fi
#define WIFI_PASSWORD "XXXXXXXXX"                                  // –ø–∞—Ä–æ–ª—å Wi-Fi
#define BOT_TOKEN "917XXXXXXX:AAEzXXXXXXXXXXXXXXXXXXXXXXXXXXXXc"   // —Ç–æ–∫–µ–Ω
const unsigned long BOT_MTBS = 1000;                               // –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
WiFiClientSecure secured_client;                                   // –∫–ª–∏–µ–Ω—Ç SSL (TLS)
UniversalTelegramBot bot(BOT_TOKEN, secured_client);               // —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
unsigned long bot_lasttime;                                        // —Å—á–µ—Ç—á–∏–∫ –≤—Ä–µ–º–µ–Ω–∏

#define LED_PIN1 4   // –ø–∏–Ω, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –ª–µ–Ω—Ç–∞
#define LED_NUM1 30  // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—Ç–æ–¥–∏–æ–¥–æ–≤ –Ω–∞ –ª–µ–Ω—Ç–µ
CRGB led1[LED_NUM1];

#define PHOTO 35 // –ø–∏–Ω –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Ñ–æ—Ç–æ—Ä–µ–∑–∏—Å—Ç–æ—Ä–∞
#define GAUGE 34 // –ø–∏–Ω –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ—Ç–µ–Ω—Ü–∏–æ–º–µ—Ç—Ä–∞

// –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
String chat_id, mail, sms;
String text;
int bright;
int message_id;
float val;
float lux;
int luix, i, c;
bool sw;

void setup() {
  Serial.begin(115200);
  pinMode(PHOTO, INPUT);
  pinMode(GAUGE, INPUT);
  FastLED.addLeds< WS2812, LED_PIN1, GRB>(led1, LED_NUM1);
  FastLED.setBrightness(100);
  delay(512);
  Serial.println();
  Serial.print("Connecting to Wifi SSID ");
  Serial.print(WIFI_SSID);
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);                 // –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
  secured_client.setCACert(TELEGRAM_CERTIFICATE_ROOT);  // —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
  while (WiFi.status() != WL_CONNECTED)                 // –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  {
    Serial.print(".");
    delay(500);
  }
  Serial.print("\nWiFi connected. IP address: ");
  Serial.println(WiFi.localIP());
}

void loop() {

  if (millis() - bot_lasttime > BOT_MTBS)  // –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
  {
    // –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å –æ–±—Ä–∞–±–æ—Ç–∫–∏
    int numNewMessages = bot.getUpdates(bot.last_message_received + 1);
    // –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—à–ª–æ
    while (numNewMessages) {
      Serial.println("got response");
      handleNewMessages(numNewMessages);
      numNewMessages = bot.getUpdates(bot.last_message_received + 1);
    }
    // –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏ –æ–ø—Ä–æ—Å–∞
    bot_lasttime = millis();
  }

  // –∏–∑–º–µ—Ä–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è –ø–æ—Ç–µ–Ω—Ü–∏–æ–º–µ—Ç—Ä–∞
  bright = analogRead(GAUGE);
  bright = map(bright, 0, 4095, 0, 100);
  FastLED.setBrightness(c * bright / 100);
  lux = analogRead(PHOTO);  // —Å—á–∏—Ç—ã–≤–∞–Ω–∏–µ –æ—Å–≤–µ—â–µ–Ω–Ω–æ—Å—Ç–∏
  // –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è—Ä–∫–æ—Å—Ç–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
  switch (sw) {
    case 0:
      FastLED.setBrightness(c * bright / 100);
      break;
    case 1:
      c = map(lux, 0, 3000, 255, 0);
      c = constrain(c, 0, 255);
      FastLED.setBrightness(c * bright / 100);
      break;
  }
  FastLED.show();
}

// —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
void handleNewMessages(int numNewMessages) {
  Serial.print("handleNewMessages ");
  Serial.println(numNewMessages);
  // –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
  for (int i = 0; i < numNewMessages; i++) {
    String mail = "";
    String sms = "[[{\"text\" : \"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —è—Ä–∫–æ—Å—Ç—å\", \"callback_data\" : \"auto\"}, {\"text\" : \"–†—É—á–Ω–∞—è —è—Ä–∫–æ—Å—Ç—å\", \"callback_data\" : \"hand\"}]]";
    // —Å—á–∏—Ç—ã–≤–∞–Ω–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è
    message_id = bot.messages[i].message_id;
    chat_id = bot.messages[i].chat_id;
    text = bot.messages[i].text;
    String from_name = bot.messages[i].from_name;  // –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (from_name == "") from_name = "Guest";
    // –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
    // –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–º–µ–µ—Ç —Ç–∏–ø –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    if (text == "/start") {
      String mail = "–ü—Ä–∏–≤–µ—Ç! üëã\n";
      mail += "–≠—Ç–æ—Ç –±–æ—Ç –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —Ç–≤–æ–µ–π —É–º–Ω–æ–π –ª–∞–º–ø–æ–π\n\n";
      String keyboardJson = "[[\"üî¥\", \"üü†\", \"üü°\"],[\"üü¢\",\"üîµ\",\"üü£\"],[\"‚ö™\", \"‚ö´\"]]";
      bot.sendMessageWithReplyKeyboard(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç", "", keyboardJson, true);
      bot.sendMessageWithInlineKeyboard(chat_id, mail, "", sms);
    }
    if (text == "üî¥") {
      bot.sendMessageWithInlineKeyboard(chat_id, "–í—ã–±—Ä–∞–Ω –∫—Ä–∞—Å–Ω—ã–π", "", sms);
      for (int i = 0; i < LED_NUM1; i++) {
        led1[i] = CRGB(255, 0, 0);
      }
    } else if (text == "üü†") {
      bot.sendMessageWithInlineKeyboard(chat_id, "–í—ã–±—Ä–∞–Ω –æ—Ä–∞–Ω–∂–µ–≤—ã–π", "", sms);
      for (int i = 0; i < LED_NUM1; i++) {
        led1[i] = CRGB(255, 150, 0);
      }
    } else if (text == "üü°") {
      bot.sendMessageWithInlineKeyboard(chat_id, "–í—ã–±—Ä–∞–Ω –∂–µ–ª—Ç—ã–π", "", sms);
      for (int i = 0; i < LED_NUM1; i++) {
        led1[i] = CRGB(255, 255, 0);
      }
    } else if (text == "üü¢") {
      bot.sendMessageWithInlineKeyboard(chat_id, "–í—ã–±—Ä–∞–Ω –∑–µ–ª–µ–Ω—ã–π", "", sms);
      for (int i = 0; i < LED_NUM1; i++) {
        led1[i] = CRGB(0, 255, 0);
      }
    } else if (text == "üîµ") {
      bot.sendMessageWithInlineKeyboard(chat_id, "–í—ã–±—Ä–∞–Ω —Å–∏–Ω–∏–π", "", sms);
      for (int i = 0; i < LED_NUM1; i++) {
        led1[i] = CRGB(0, 0, 255);
      }
    } else if (text == "üü£") {
      bot.sendMessageWithInlineKeyboard(chat_id, "–í—ã–±—Ä–∞–Ω —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π", "", sms);
      for (int i = 0; i < LED_NUM1; i++) {
        led1[i] = CRGB(255, 0, 255);
      }
    } else if (text == "‚ö™") {
      bot.sendMessageWithInlineKeyboard(chat_id, "–í—ã–±—Ä–∞–Ω –±–µ–ª—ã–π", "", sms);
      for (int i = 0; i < LED_NUM1; i++) {
        led1[i] = CRGB(255, 255, 255);
      }
    } else if (text == "‚ö´") {
      bot.sendMessageWithInlineKeyboard(chat_id, "–õ–∞–º–ø–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞", "", sms);
      for (int i = 0; i < LED_NUM1; i++) {
        led1[i] = CRGB(0, 0, 0);
      }
    }
    if (text == "auto") {
      sw = 1;
    } else if (text == "hand") {
      sw = 0;
      bot.sendMessage(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —è—Ä–∫–æ—Å—Ç—å –æ—Ç 0 –¥–¥–æ 255 ", "");
      String led_status = text;
      // –∂–¥–µ–º, –ø–æ–∫–∞ –Ω–µ –ø—Ä–∏–¥–µ—Ç –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
      while (led_status == text) {
        numNewMessages = bot.getUpdates(bot.last_message_received + 1);
        led_status = bot.messages[i].text;
      }
      // –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –≤ int
      c = led_status.toInt();
      FastLED.setBrightness(c * bright / 100);
    }
    FastLED.show();
    sms = "[[{\"text\" : \"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —è—Ä–∫–æ—Å—Ç—å\", \"callback_data\" : \"/red\"}, {\"text\" : \"–†—É—á–Ω–∞—è —è—Ä–∫–æ—Å—Ç—å\", \"callback_data\" : \"/green\"}]]";
  }
}
