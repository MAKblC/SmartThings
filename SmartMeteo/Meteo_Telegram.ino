#include <Wire.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_BME280.h>
Adafruit_BME280 bme280;

#include <WiFi.h>
#include <WiFiClientSecure.h>
#include <UniversalTelegramBot.h>

#define WIFI_SSID "XXXXX"
#define WIFI_PASSWORD "XXXXXXX"
#define BOT_TOKEN "917994XXXXXXXXXXXXXXXXXDvr-RPiM4PUc"
#define your_chat_ID "2XXXXXXXXX7"  // ID –≤–∞—à–µ–≥–æ —á–∞—Ç–∞ —Å –±–æ—Ç–æ–º
int t_max = 27;
int h_min = 40;
int raw_min = 2000;

const int pinPhoto = 35;

const unsigned long BOT_MTBS = 1000;       // –ø–µ—Ä–∏–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
const unsigned long sensor_alert = 10000;  // –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (10 —Å–µ–∫)
WiFiClientSecure secured_client;
UniversalTelegramBot bot(BOT_TOKEN, secured_client);
unsigned long bot_lasttime, sensor_monitor;
String sensor_status;
bool alert = true;

#include <FastLED.h>     // –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–∞—Ç—Ä–∏—Ü—ã
#define NUM_LEDS 30      // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—Ç–æ–¥–∏–æ–¥–æ–≤ –≤ –º–∞—Ç—Ä–∏—Ü–µ
CRGB leds[NUM_LEDS];     // –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞—Ç—Ä–∏—Ü—É (FastLED –±–∏–±–ª–∏–æ—Ç–µ–∫–∞)
#define LED_PIN 4        // –ø–∏–Ω –∫ –∫–æ—Ç–æ—Ä–æ–º—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –º–∞—Ç—Ä–∏—Ü–∞
#define COLOR_ORDER GRB  // –ø–æ—Ä—è–¥–æ–∫ —Ü–≤–µ—Ç–æ–≤ –º–∞—Ç—Ä–∏—Ü—ã
#define CHIPSET WS2812   // —Ç–∏–ø —Å–≤–µ—Ç–æ–¥–∏–æ–¥–æ–≤

#include <iocontrol.h>
const char* myPanelName = "XXXXX";
int status;
// –ù–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∫–∞–∫ –Ω–∞ —Å–∞–π—Ç–µ iocontrol.ru
const char* VarName_temperature = "temperature";
const char* VarName_humidity = "humidity";
const char* VarName_pressure = "pressure";
const char* VarName_light = "light";
WiFiClient client;
iocontrol mypanel(myPanelName, client);

void setup() {
  Serial.begin(115200);

  Wire.begin();
  bool bme_status = bme280.begin();
  if (!bme_status) {
    Serial.println("–ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É 0—Ö77, –ø—Ä–æ–±—É—é –¥—Ä—É–≥–æ–π...");
    bme_status = bme280.begin(0x76);
    if (!bme_status)
      Serial.println("–î–∞—Ç—á–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ");
  }

  FastLED.addLeds<NEOPIXEL, LED_PIN>(leds, NUM_LEDS);
  pinMode(pinPhoto, INPUT);

  Serial.println();
  Serial.print("Connecting to Wifi SSID ");
  Serial.print(WIFI_SSID);
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  secured_client.setCACert(TELEGRAM_CERTIFICATE_ROOT);
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print(".");
    delay(500);
  }
  Serial.print("\nWiFi connected. IP address: ");
  Serial.println(WiFi.localIP());

  fill_solid(leds, NUM_LEDS, CRGB(0, 255, 0));  // –∑–∞–ø–æ–ª–Ω–∏—Ç—å –≤—Å—é –º–∞—Ç—Ä–∏—Ü—É –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ü–≤–µ—Ç–æ–º
  FastLED.show();
  delay(500);
  FastLED.clear();
  FastLED.show();

  mypanel.begin();
  bot.sendMessage(your_chat_ID, "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω", "");  // —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –í–∞—à —á–∞—Ç
}

void loop() {
  float t = bme280.readTemperature();
  float h = bme280.readHumidity();
  float p = bme280.readPressure() / 133.3F;
  float raw = analogRead(pinPhoto);
  if (alert and (t > t_max or h < h_min)) {          // –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–µ–≤—ã—à–µ–Ω–æ
    if (millis() - sensor_monitor > sensor_alert) {  // –µ—Å–ª–∏ —É–∂–µ –ø—Ä–æ—à–ª–æ 10 —Å–µ–∫—É–Ω–¥ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
      String welcome = "–ü—Ä–µ–≤—ã—à–µ–Ω—ã –Ω–æ—Ä–º—ã –¥–∞—Ç—á–∏–∫–æ–≤:\n";
      welcome += "üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞: " + String(t, 1) + "¬∞C (" + t_max + "¬∞C)\n";
      welcome += "üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞: " + String(h, 0) + "% (" + h_min + " %)\n";
      welcome += "---------------------------------\n";
      welcome += "/alertsoff - –æ—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n";
      bot.sendMessage(your_chat_ID, welcome, "");  // –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      sensor_monitor = millis();                   // —Å–±—Ä–æ—Å —Ç–∞–π–º–µ—Ä–∞
    }
  }
  if (raw < raw_min) {
    for (int i = 10; i < NUM_LEDS; i++) {
      leds[i].setRGB(255, 255, 255);
    }
  } else {
    for (int i = 10; i < NUM_LEDS; i++) {
      leds[i].setRGB(0, 0, 0);
    }
  }
  FastLED.show();
  if (millis() - bot_lasttime > BOT_MTBS) {
    int numNewMessages = bot.getUpdates(bot.last_message_received + 1);

    while (numNewMessages) {
      Serial.println("got response");
      handleNewMessages(numNewMessages);
      numNewMessages = bot.getUpdates(bot.last_message_received + 1);
    }

    bot_lasttime = millis();
  }
  mypanel.write(VarName_temperature, t);  // –ó–∞–ø–∏—Å–∞–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ
  mypanel.write(VarName_humidity, h);     // –ó–∞–ø–∏—Å–∞–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ
  mypanel.write(VarName_pressure, p);     // –ó–∞–ø–∏—Å–∞–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ
  mypanel.write(VarName_light, raw);      // –ó–∞–ø–∏—Å–∞–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ
  status = mypanel.writeUpdate();
  // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å —Ä–∞–≤–µ–Ω –∫–æ–Ω—Å—Ç–∞–Ω—Ç–µ OK...
  if (status == OK) {
    // –í—ã–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –ø–æ—Ä—Ç
    Serial.println("------- Write OK -------");
  }
}

void handleNewMessages(int numNewMessages) {
  Serial.println("handleNewMessages");
  Serial.println(String(numNewMessages));
  for (int i = 0; i < numNewMessages; i++) {
    String chat_id = String(bot.messages[i].chat_id);
    String text = bot.messages[i].text;
    text.toLowerCase();
    String from_name = bot.messages[i].from_name;
    if (from_name == "") from_name = "Guest";
    if (text == "/sensors") {
      float t = bme280.readTemperature();
      float h = bme280.readHumidity();
      float p = bme280.readPressure() / 133.3F;
      float raw = analogRead(pinPhoto);
      String welcome = "–ü–æ–∫–∞–∑–∞–Ω–∏—è –¥–∞—Ç—á–∏–∫–æ–≤:\n";
      welcome += "üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞: " + String(t, 1) + " ¬∞C\n";
      welcome += "üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞: " + String(h, 0) + " %\n";
      welcome += "‚òÅ –ê—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ: " + String(p, 0) + " –º–º —Ä—Ç.—Å—Ç.\n";
      welcome += "‚òÄ –û—Å–≤–µ—â–µ–Ω–Ω–æ—Å—Ç—å: " + String(raw, 0) + " –õ–∫\n";
      bot.sendMessage(chat_id, welcome, "Markdown");
    }

    if (text == "/start") {
      bot.sendMessage(chat_id, "–ü—Ä–∏–≤–µ—Ç, " + from_name + "!", "");
      bot.sendMessage(chat_id, "–Ø –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –ô–æ—Ç–∏–∫ 32. –ö–æ–º–∞–Ω–¥—ã —Å–º–æ—Ç—Ä–∏—Ç–µ –≤ –º–µ–Ω—é —Å–ª–µ–≤–∞ –æ—Ç —Å—Ç—Ä–æ–∫–∏ –≤–≤–æ–¥–∞", "");
      String sms = "–ö–æ–º–∞–Ω–¥—ã:\n";
      sms += "/sensors - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–∫–∞–∑–∞–Ω–∏—è\n";
      sms += "/temp - –∏–∑–º–µ–Ω–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã\n";
      sms += "/hum - –∏–∑–º–µ–Ω–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –≤–ª–∞–∂–Ω–æ—Å—Ç–∏\n";
      sms += "/alertson - –≤–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n";
      bot.sendMessage(chat_id, sms, "Markdown");
    }
    if (text == "/temp") {
      bot.sendMessage(chat_id, "–í–≤–µ–¥–∏—Ç–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã", "");
      sensor_status = text;
      // –∂–¥–µ–º, –ø–æ–∫–∞ –Ω–µ –ø—Ä–∏–¥–µ—Ç –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
      while (sensor_status == text) {
        numNewMessages = bot.getUpdates(bot.last_message_received + 1);
        sensor_status = bot.messages[i].text;
      }
      // –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –≤ int
      t_max = sensor_status.toInt();
      bot.sendMessage(chat_id, "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Ç–µ–ø–µ—Ä—å: " + String(t_max, 1) + "¬∞C", "");
    }
    if (text == "/hum") {
      bot.sendMessage(chat_id, "–í–≤–µ–¥–∏—Ç–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–ª–∞–∂–Ω–æ—Å—Ç–∏", "");
      sensor_status = text;
      // –∂–¥–µ–º, –ø–æ–∫–∞ –Ω–µ –ø—Ä–∏–¥–µ—Ç –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
      while (sensor_status == text) {
        numNewMessages = bot.getUpdates(bot.last_message_received + 1);
        sensor_status = bot.messages[i].text;
      }
      // –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –≤ int
      h_min = sensor_status.toInt();
      bot.sendMessage(chat_id, "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –≤–ª–∞–∂–Ω–æ—Å—Ç—å —Ç–µ–ø–µ—Ä—å: " + String(h_min) + "%", "");
    }
    if (text == "/alertson") {
      alert = true;
      bot.sendMessage(chat_id, "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã ", "");
    }
    if (text == "/alertsoff") {
      alert = false;
      bot.sendMessage(chat_id, "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã ", "");
    }
  }
}
