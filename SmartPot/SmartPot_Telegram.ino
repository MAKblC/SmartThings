#include <WiFi.h>
#include <WiFiClientSecure.h>
#include <UniversalTelegramBot.h>
#include <HTTPClient.h>

#define WIFI_SSID "XXXXXX"
#define WIFI_PASSWORD "XXXXXXXXXXXX"
#define BOT_TOKEN "91XXXXXXXXXXXXXXXXXXXXXXXXvr-RPiM4PUc"
#define your_chat_ID "2XXXXXX47"  // ID –≤–∞—à–µ–≥–æ —á–∞—Ç–∞ —Å –±–æ—Ç–æ–º

const unsigned long BOT_MTBS = 1000;       // –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¢–µ–ª–µ–≥—Ä–∞–º (1 —Å–µ–∫—É–Ω–¥–∞)
const unsigned long sensor_alert = 60000;  // –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π (1 –º–∏–Ω—É—Ç–∞)
WiFiClientSecure secured_client;
UniversalTelegramBot bot(BOT_TOKEN, secured_client);
unsigned long bot_lasttime, water_timer, sensor_monitor, sensor_lasttime;

#include "time.h"
const char* ntpServer = "pool.ntp.org";  // –æ—Ç—Å—é–¥–∞ —Å—á–∏—Ç–∞–µ—Ç—Å—è —Ç–µ–∫—É—â–∏–µ –¥–∞—Ç–∞/–≤—Ä–µ–º—è
const long gmtOffset_sec = 10800;        // +3 —á–∞—Å–∞ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ –ú–°–ö
const int daylightOffset_sec = 0;
int hour;
String time_buffer;

#include <Wire.h>

#define pump 23  // –ø–∏–Ω –Ω–∞—Å–æ—Å–∞

#include <FastLED.h>     // –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–∞—Ç—Ä–∏—Ü—ã
#define NUM_LEDS 30      // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—Ç–æ–¥–∏–æ–¥–æ–≤ –≤ –º–∞—Ç—Ä–∏—Ü–µ
CRGB leds[NUM_LEDS];     // –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞—Ç—Ä–∏—Ü—É (FastLED –±–∏–±–ª–∏–æ—Ç–µ–∫–∞)
#define LED_PIN 4        // –ø–∏–Ω –∫ –∫–æ—Ç–æ—Ä–æ–º—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –º–∞—Ç—Ä–∏—Ü–∞
#define COLOR_ORDER GRB  // –ø–æ—Ä—è–¥–æ–∫ —Ü–≤–µ—Ç–æ–≤ –º–∞—Ç—Ä–∏—Ü—ã
#define CHIPSET WS2812   // —Ç–∏–ø —Å–≤–µ—Ç–æ–¥–∏–æ–¥–æ–≤

const int pinPhoto = 35;

#include <Adafruit_Sensor.h>  // –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–∞—Ç—á–∏–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã, –≤–ª–∞–∂–Ω–æ—Å—Ç–∏ –∏ –¥–∞–≤–ª–µ–Ω–∏—è
#include <Adafruit_BME280.h>
Adafruit_BME280 bme280;

// –¥–ª—è –∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–∏ –≤ –¢–µ–ª–µ–≥—Ä–∞–º–µ
String temp_max = "29";
String hum_min = "20";
String water_last = "0:00";
String lightedge = "600";
String lightbegin = "8";
String lightend = "20";
String wateredge = "10";
String watertiming = "0";
String pumpPower = "100";

// –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∂–∏–º–∞ –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏—è
int water_uptime;
int h_min = 20;       // –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–ª–∞–∂–Ω–æ—Å—Ç—å
int t_max = 29;       // –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
int lightE = 1000;    // –ø–æ—Ä–æ–≥ –≤–∫–ª—é—á–µ–Ω–∏—è —Å–≤–µ—Ç–∞ (–≤ –õ—é–∫—Å)
int lightBegin = 8;   // –Ω–∞—á–∞–ª–æ —Å–≤–µ—Ç–æ–≤–æ–≥–æ –¥–Ω—è –≤ 8 —É—Ç—Ä–∞
int lightEnd = 20;    // –∫–æ–Ω–µ—Ü —Å–≤–µ—Ç–æ–≤–æ–≥–æ –¥–Ω—è –≤ 8 –≤–µ—á–µ—Ä–∞
int waterE = 600000;  // –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –ø–æ–ª–∏–≤–∞ –≤ –º—Å (10 –º–∏–Ω)
int waterT = 0;       // –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–ª–∏–≤–∞ –≤ –º—Å (0 —Å–µ–∫)

void setup() {
  Wire.begin();

  pinMode(pump, OUTPUT);
  digitalWrite(pump, LOW);

  Serial.begin(115200);
  delay(512);

  FastLED.addLeds<NEOPIXEL, LED_PIN>(leds, NUM_LEDS);

  pinMode(pinPhoto, INPUT);

  //–∑–∞–ø—É—Å–∫ –¥–∞—Ç—á–∏–∫–∞ MGS-THP80
  bool bme_status = bme280.begin();
  if (!bme_status) {
    Serial.println("–ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É 0—Ö77, –ø—Ä–æ–±—É—é –¥—Ä—É–≥–æ–π...");
    bme_status = bme280.begin(0x76);
    if (!bme_status)
      Serial.println("–î–∞—Ç—á–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ");
  }

  Serial.println();
  Serial.print("–ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ Wifi: ");
  Serial.print(WIFI_SSID);
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  secured_client.setCACert(TELEGRAM_CERTIFICATE_ROOT);
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print(".");
    delay(500);
  }
  Serial.print("\nWiFi –ø–æ–¥–∫–ª—é—á–µ–Ω. IP –∞–¥—Ä–µ—Å: ");
  Serial.println(WiFi.localIP());

  configTime(gmtOffset_sec, daylightOffset_sec, ntpServer);  // –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏

  bot_setup();
}

void loop() {
  // –ø—Ä–æ–≤–µ—Ä–∫–∞, –Ω—É–∂–Ω–æ –ª–∏ —É–∂–µ –ø–æ–ª–∏–≤–∞—Ç—å?
  if (millis() - water_timer > waterE) {
    digitalWrite(pump, HIGH);
    Serial.println("–í–∫–ª—é—á–µ–Ω –ø–æ–ª–∏–≤");
    delay(waterT * 1000);
    digitalWrite(pump, LOW);
    Serial.println("–í—ã–∫–ª—é—á–µ–Ω –ø–æ–ª–∏–≤");
    getTime();
    water_last = time_buffer;
    water_timer = millis();
  }

  // –ø—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –¢–µ–ª–µ–≥—Ä–∞–º–µ?
  if (millis() - bot_lasttime > BOT_MTBS) {
    int numNewMessages = bot.getUpdates(bot.last_message_received + 1);

    while (numNewMessages) {
      Serial.println("got response");
      handleNewMessages(numNewMessages);
      numNewMessages = bot.getUpdates(bot.last_message_received + 1);
    }

    bot_lasttime = millis();
  }

  // –ø—Ä–æ–≤–µ—Ä–∫–∞, –∏–¥–µ—Ç –ª–∏ —Å–≤–µ—Ç–æ–≤–æ–π –¥–µ–Ω—å?
  getTime();
  float raw = analogRead(pinPhoto);
  if (raw < lightE and hour >= lightBegin and hour < lightEnd) {
    for (int i = 12; i < NUM_LEDS; i++) {
      leds[i].setRGB(255, 0, 127);
    }
    FastLED.show();
  } else {
    for (int i = 12; i < NUM_LEDS; i++) {
      leds[i].setRGB(0, 0, 0);
    }
    FastLED.show();
  }

  float t = bme280.readTemperature();
  if (t > t_max) {
    for (int i = 0; i < 6; i++) {
      leds[i].setRGB(255, 0, 0);
    }
    FastLED.show();
  } else {
    for (int i = 0; i < 6; i++) {
      leds[i].setRGB(0, 0, 0);
    }
    FastLED.show();
  }

  float h = bme280.readHumidity();
  if (h < h_min) {
    for (int i = 6; i < 12; i++) {
      leds[i].setRGB(0, 0, 255);
    }
    FastLED.show();
  } else {
    for (int i = 6; i < 12; i++) {
      leds[i].setRGB(0, 0, 0);
    }
    FastLED.show();
  }

  if (t > t_max or h < h_min) {                      // –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–µ–≤—ã—à–µ–Ω–æ
    if (millis() - sensor_monitor > sensor_alert) {  // –µ—Å–ª–∏ —É–∂–µ –ø—Ä–æ—à–ª–∞ 1 –º–∏–Ω—É—Ç–∞ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
      String welcome = "*–£—Å–ª–æ–≤–∏—è –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏—è –Ω–µ —Å–æ–±–ª—é–¥–∞—é—Ç—Å—è!*\n";
      welcome += "–ü–æ–∫–∞–∑–∞–Ω–∏—è –¥–∞—Ç—á–∏–∫–æ–≤:\n-------------------------------------------\n";
      welcome += "üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞: " + String(t, 1) + " ¬∞C\n";
      welcome += "üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞: " + String(h, 0) + " %\n";
      bot.sendMessage(your_chat_ID, welcome, "Markdown");  // –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      sensor_monitor = millis();                           // —Å–±—Ä–æ—Å —Ç–∞–π–º–µ—Ä–∞
    }
  }
}


// –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
void handleNewMessages(int numNewMessages) {
  Serial.print("handleNewMessages ");
  Serial.println(numNewMessages);

  for (int i = 0; i < numNewMessages; i++) {
    String chat_id = bot.messages[i].chat_id;
    String text = bot.messages[i].text;
    text.toLowerCase();
    String from_name = bot.messages[i].from_name;
    if (from_name == "")
      from_name = "Guest";
    if (text == "/waterperiod") {
      String sms = "–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –ø–æ–ª–∏–≤–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö\n";
      sms += "–¢–µ–∫—É—â–∞—è –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å: ";
      sms += wateredge + " –º–∏–Ω—É—Ç";
      bot.sendMessage(chat_id, sms, "");
      wateredge = text;
      while (wateredge == text) {
        numNewMessages = bot.getUpdates(bot.last_message_received + 1);
        wateredge = bot.messages[i].text;
      }
      waterE = wateredge.toInt();
      bot.sendMessage(chat_id, "–ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –ø–æ–ª–∏–≤–∞ —Ç–µ–ø–µ—Ä—å " + String(waterE) + (" –º–∏–Ω—É—Ç"), "");
      waterE = waterE * 60000;
    }
    if (text == "/watertime") {
      String sms = "–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–ª–∏–≤–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö\n";
      sms += "–¢–µ–∫—É—â–∞—è –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å: ";
      sms += watertiming + " —Å–µ–∫—É–Ω–¥";
      bot.sendMessage(chat_id, sms, "");
      watertiming = text;
      while (watertiming == text) {
        numNewMessages = bot.getUpdates(bot.last_message_received + 1);
        watertiming = bot.messages[i].text;
      }
      waterT = watertiming.toInt();
      bot.sendMessage(chat_id, "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–ª–∏–≤–∞ —Ç–µ–ø–µ—Ä—å " + String(waterT) + (" —Å–µ–∫—É–Ω–¥"), "");
    }
    if (text == "/lightedge") {
      String sms = "–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä–æ–≥ –≤–∫–ª—é—á–µ–Ω–∏—è –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –æ—Å–≤–µ—â–µ–Ω–∏—è\n";
      sms += "–¢–µ–∫—É—â–∏–π –ø–æ—Ä–æ–≥: ";
      sms += lightedge + " –õ—é–∫—Å";
      bot.sendMessage(chat_id, sms, "");
      lightedge = text;
      while (lightedge == text) {
        numNewMessages = bot.getUpdates(bot.last_message_received + 1);
        lightedge = bot.messages[i].text;
      }
      lightE = lightedge.toInt();
      bot.sendMessage(chat_id, "–ü–æ—Ä–æ–≥ –æ—Å–≤–µ—â–µ–Ω–Ω–æ—Å—Ç–∏ —Ç–µ–ø–µ—Ä—å " + String(lightE) + " –õ—é–∫—Å", "");
    }
    if (text == "/lightbegin") {
      String sms = "–í–≤–µ–¥–∏—Ç–µ —á–∞—Å –Ω–∞—á–∞–ª–∞ —Å–≤–µ—Ç–æ–≥–æ –¥–Ω—è\n";
      sms += "–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ä—Ç –≤ ";
      sms += lightbegin + " —á–∞—Å–æ–≤";
      bot.sendMessage(chat_id, sms, "");
      lightbegin = text;
      while (lightbegin == text) {
        numNewMessages = bot.getUpdates(bot.last_message_received + 1);
        lightbegin = bot.messages[i].text;
      }
      lightBegin = lightbegin.toInt();
      bot.sendMessage(chat_id, "–°—Ç–∞—Ä—Ç —Å–≤–µ—Ç–æ–≤–æ–≥–æ –¥–Ω—è —Ç–µ–ø–µ—Ä—å –≤ " + String(lightBegin) + " —á–∞—Å–æ–≤", "");
    }
    if (text == "/lightend") {
      String sms = "–í–≤–µ–¥–∏—Ç–µ —á–∞—Å –∫–æ–Ω—Ü–∞ —Å–≤–µ—Ç–æ–≥–æ –¥–Ω—è\n";
      sms += "–¢–µ–∫—É—â–∏–π –∫–æ–Ω–µ—Ü –≤ ";
      sms += lightend + " —á–∞—Å–æ–≤";
      bot.sendMessage(chat_id, sms, "");
      lightend = text;
      while (lightend == text) {
        numNewMessages = bot.getUpdates(bot.last_message_received + 1);
        lightend = bot.messages[i].text;
      }
      lightEnd = lightend.toInt();
      bot.sendMessage(chat_id, "–ö–æ–Ω–µ—Ü —Å–≤–µ—Ç–æ–≤–æ–≥–æ –¥–Ω—è —Ç–µ–ø–µ—Ä—å –≤ " + String(lightEnd) + " —á–∞—Å–æ–≤", "");
    }
    if (text == "/t_max") {
      String sms = "–í–≤–µ–¥–∏—Ç–µ –≥—Ä–∞–Ω–∏—Ü—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã\n";
      sms += "–¢–µ–∫—É—â–∞—è –≥—Ä–∞–Ω–∏—Ü–∞: ";
      sms += temp_max + " –≥—Ä–∞–¥—É—Å–æ–≤";
      bot.sendMessage(chat_id, sms, "");
      temp_max = text;
      while (temp_max == text) {
        numNewMessages = bot.getUpdates(bot.last_message_received + 1);
        temp_max = bot.messages[i].text;
      }
      t_max = temp_max.toInt();
      bot.sendMessage(chat_id, "–ì—Ä–∞–Ω–∏—Ü–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã —Ç–µ–ø–µ—Ä—å " + String(t_max) + " –≥—Ä–∞–¥—É—Å–æ–≤", "");
    }
    if (text == "/h_min") {
      String sms = "–í–≤–µ–¥–∏—Ç–µ –≥—Ä–∞–Ω–∏—Ü—É –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –≤–ª–∞–∂–Ω–æ—Å—Ç–∏\n";
      sms += "–¢–µ–∫—É—â–∞—è –≥—Ä–∞–Ω–∏—Ü–∞: ";
      sms += hum_min + "%";
      bot.sendMessage(chat_id, sms, "");
      hum_min = text;
      while (hum_min == text) {
        numNewMessages = bot.getUpdates(bot.last_message_received + 1);
        hum_min = bot.messages[i].text;
      }
      h_min = hum_min.toInt();
      bot.sendMessage(chat_id, "–ì—Ä–∞–Ω–∏—Ü–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –≤–ª–∞–∂–Ω–æ—Å—Ç–∏ —Ç–µ–ø–µ—Ä—å " + String(h_min) + "%", "");
    }
    if (text == "/info") {
      String welcome = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏:\n-------------------------------------------\n";
      welcome += "üí¶ –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ–ª–∏–≤: " + water_last + "\n";
      welcome += "‚è≥ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–ª–∏–≤–∞: " + String(waterT) + " —Å–µ–∫—É–Ω–¥\n";
      welcome += "üìÜ –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –ø–æ–ª–∏–≤–∞: " + String(waterE / 60000) + " –º–∏–Ω—É—Ç\n";
      water_uptime = (waterE - (millis() - water_timer)) / 60000;
      welcome += "‚è∞ –°–ª–µ–¥—É—é—â–∏–π –ø–æ–ª–∏–≤ —á–µ—Ä–µ–∑: " + String(water_uptime) + " –º–∏–Ω—É—Ç/ ~" + String(water_uptime / 60) + " —á–∞—Å–æ–≤\n";
      welcome += "üí° –ü–æ—Ä–æ–≥ –≤–∫–ª—é—á–µ–Ω–∏—è —Å–≤–µ—Ç–∞: " + String(lightE) + " –õ—é–∫—Å\n";
      welcome += "‚òÄÔ∏è –ù–∞—á–∞–ª–æ —Å–≤–µ—Ç–æ–≤–æ–≥–æ –¥–Ω—è –≤: " + String(lightBegin) + " —á–∞—Å–æ–≤\n";
      welcome += "üåô –ö–æ–Ω–µ—Ü —Å–≤–µ—Ç–æ–≤–æ–≥–æ –¥–Ω—è –≤: " + String(lightEnd) + " —á–∞—Å–æ–≤\n";
      bot.sendMessage(chat_id, welcome, "Markdown");
    }
    if (text == "/sensors") {
      float l = analogRead(pinPhoto);
      float t = bme280.readTemperature();
      float h = bme280.readHumidity();
      float p = bme280.readPressure() / 133.3F;
      String welcome = "–ü–æ–∫–∞–∑–∞–Ω–∏—è –¥–∞—Ç—á–∏–∫–æ–≤:\n-------------------------------------------\n";
      welcome += "üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞: " + String(t, 1) + " ¬∞C\n";
      welcome += "üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞: " + String(h, 0) + " %\n";
      welcome += "‚òÅ –ê—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ: " + String(p, 0) + " –º–º —Ä—Ç.—Å—Ç.\n";
      welcome += "‚òÄ –û—Å–≤–µ—â–µ–Ω–Ω–æ—Å—Ç—å: " + String(l) + " –õ–∫\n\n";
      bot.sendMessage(chat_id, welcome, "Markdown");
    }
    if (text == "/start") {
      bot.sendMessage(chat_id, "–ü—Ä–∏–≤–µ—Ç, " + from_name + "!", "");
      bot.sendMessage(chat_id, "–Ø –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –ô–æ—Ç–∏–∫ 32. –Ø –ø—Ä–∏–Ω–∏–º–∞—é —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:", "");
      String sms = "/sensors - —Å—á–∏—Ç–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è —Å –¥–∞—Ç—á–∏–∫–æ–≤\n";
      sms += "/lightedge - –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä–æ–≥ –æ—Å–≤–µ—â–µ–Ω–∏—è\n";
      sms += "/waterperiod - –∏–∑–º–µ–Ω–∏—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –ø–æ–ª–∏–≤–∞\n";
      sms += "/watertime - –∏–∑–º–µ–Ω–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–ª–∏–≤–∞\n";
      sms += "/lightbegin - –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—á–∞–ª–æ —Å–≤–µ—Ç–æ–≤–æ–≥–æ –¥–Ω—è\n";
      sms += "/lightend - –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–Ω–µ—Ü —Å–≤–µ—Ç–æ–≤–æ–≥–æ –¥–Ω—è\n";
      sms += "/t_max - –∏–∑–º–µ–Ω–∏—Ç—å –≥—Ä–∞–Ω–∏—Ü—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã\n";
      sms += "/h_min - –∏–∑–º–µ–Ω–∏—Ç—å –≥—Ä–∞–Ω–∏—Ü—É –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –≤–ª–∞–∂–Ω–æ—Å—Ç–∏\n";
      bot.sendMessage(chat_id, sms, "");
    }
  }
}

// —Å—á–∏—Ç–∞—Ç—å –≤—Ä–µ–º—è
void getTime() {
  struct tm timeinfo;
  if (!getLocalTime(&timeinfo)) {
    Serial.println("Failed to obtain time");
    return;
  }
  char timeStringBuff[50];
  strftime(timeStringBuff, sizeof(timeStringBuff), "%d.%b –≤ %H:%M", &timeinfo);  // –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
  String asString(timeStringBuff);
  time_buffer = asString;
  // day = timeinfo.tm_mday;
  // month = timeinfo.tm_mon + 1;
  hour = timeinfo.tm_hour;
  // minute = timeinfo.tm_min;
}

// –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ
void bot_setup() {
  const String commands = F("["
                            "{\"command\":\"watertime\",  \"description\":\"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–ª–∏–≤–∞\"},"
                            "{\"command\":\"waterperiod\", \"description\":\"–ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –ø–æ–ª–∏–≤–∞\"},"
                            "{\"command\":\"lightedge\",  \"description\":\"–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä–æ–≥ –æ—Å–≤–µ—â–µ–Ω–∏—è\"},"
                            "{\"command\":\"lightbegin\",  \"description\":\"–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—á–∞–ª–æ —Å–≤–µ—Ç–æ–≤–æ–≥–æ –¥–Ω—è\"},"
                            "{\"command\":\"lightend\",  \"description\":\"–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–Ω–µ—Ü —Å–≤–µ—Ç–æ–≤–æ–≥–æ –¥–Ω—è\"},"
                            "{\"command\":\"t_max\",  \"description\":\"–ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä–∞–Ω–∏—Ü—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã\"},"
                            "{\"command\":\"h_min\",  \"description\":\"–ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä–∞–Ω–∏—Ü—É –º–∏–Ω–∏–º–ª–∞—å–Ω–æ–π –≤–ª–∞–∂–Ω–æ—Å—Ç–∏\"},"
                            "{\"command\":\"info\",\"description\":\"–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\"}"
                            "]");
  bot.setMyCommands(commands);
}
